# .env.example (copy to .env and modify values)
NODE_ENV=development
DATABASE_URL=postgresql://budget_user:budget_password@localhost:5432/budget_tracker
JWT_SECRET=your-super-secret-jwt-key-change-in-production
PORT=3001
VITE_API_URL=http://localhost:3001

# .dockerignore
node_modules
npm-debug.log
.git
.gitignore
README.md
.env
.nyc_output
coverage
.env.local
.env.development.local
.env.test.local
.env.production.local

# .gitignore
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Production builds
dist/
build/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Database
data/

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
.nyc_output/

# README.md
# Budget Tracker Application

A full-stack budget tracking application built with React, Node.js, PostgreSQL, and Docker.

## Features

- User authentication (register/login)
- Add, edit, and delete transactions
- Categorize income and expenses
- Real-time balance calculation
- Responsive design
- Secure API with JWT authentication

## Quick Start

1. Clone the repository
2. Copy `.env.example` to `.env` and update values
3. Run with Docker Compose:

```bash
docker-compose up --build
```

4. Access the application at http://localhost:3000

## Development

### Backend (Node.js/Express)
```bash
cd backend
npm install
npm run dev
```

### Frontend (React/Vite)
```bash
cd frontend
npm install
npm run dev
```

### Database (PostgreSQL)
The database will be automatically initialized with the required tables when you start the containers.

## Deployment

This application is containerized and ready for deployment on:
- Railway
- Render
- DigitalOcean App Platform
- AWS ECS
- Google Cloud Run

### Environment Variables for Production
- `NODE_ENV=production`
- `DATABASE_URL=your_production_database_url`
- `JWT_SECRET=your_secure_jwt_secret`
- `PORT=3001`

## API Endpoints

- `POST /api/auth/register` - Register new user
- `POST /api/auth/login` - Login user
- `GET /api/transactions` - Get user transactions
- `POST /api/transactions` - Create transaction
- `PUT /api/transactions/:id` - Update transaction
- `DELETE /api/transactions/:id` - Delete transaction
- `GET /api/summary` - Get financial summary

## Tech Stack

- **Frontend**: React, Vite, Tailwind CSS, Axios
- **Backend**: Node.js, Express, JWT, bcrypt
- **Database**: PostgreSQL
- **Containerization**: Docker, Docker Compose
- **Deployment**: Ready for cloud platforms